version: '3.8'

services:
  # PostgreSQL Database
  db:
    image: postgres:15-alpine
    restart: always
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: full_express_api
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8"
    ports:
      - "5432:5432"
    volumes:
      - db_data:/var/lib/postgresql/data
      - ./init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d full_express_api"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    networks:
      - api-network

  # Redis for caching
  redis:
    image: redis:7-alpine
    restart: always
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - api-network

  # MinIO Object Storage
  minio:
    image: minio/minio:latest
    restart: always
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin
    command: server /data --console-address ":9001"
    volumes:
      - minio_data:/data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3
    networks:
      - api-network

  # API Application
  api:
    build:
      context: .
      dockerfile: Dockerfile
    restart: always
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
      minio:
        condition: service_healthy
    environment:
      # Database
      DATABASE_URL: postgresql://postgres:postgres@db:5432/full_express_api
      
      # Application
      NODE_ENV: production
      PORT: 3001
      JWT_SECRET: your-super-secret-jwt-key-change-in-production
      
      # Redis
      REDIS_URL: redis://redis:6379
      
      # MinIO Configuration
      MINIO_ENDPOINT: minio
      MINIO_PORT: 9000
      MINIO_ACCESS_KEY: minioadmin
      MINIO_SECRET_KEY: minioadmin
      MINIO_USE_SSL: false
      MINIO_BASE_URL: http://localhost:9000
      
      # Logging
      LOG_LEVEL: info
      
      # Rate limiting
      RATE_LIMIT_WINDOW_MS: 900000
      RATE_LIMIT_MAX_REQUESTS: 100
    ports:
      - "3001:3001"
    volumes:
      - ./logs:/app/logs
      - ./uploads:/app/uploads
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - api-network
    command: >
      sh -c "
        echo 'ðŸ”„ Waiting for database to be ready...' &&
        npx prisma migrate deploy &&
        echo 'ðŸŒ± Seeding database...' &&
        npm run prisma:seed &&
        echo 'ðŸš€ Starting API server...' &&
        npm start
      "

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    restart: always
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    depends_on:
      - api
    networks:
      - api-network
    profiles:
      - production

volumes:
  db_data:
    driver: local
  redis_data:
    driver: local
  minio_data:
    driver: local

networks:
  api-network:
    driver: bridge 