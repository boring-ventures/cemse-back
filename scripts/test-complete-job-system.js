const https = require('https');
const http = require('http');

// Configuraci√≥n
const API_BASE_URL = 'http://localhost:3001/api';

// Funci√≥n para hacer requests HTTP
function makeRequest(url, method = 'GET', headers = {}, body = null) {
  return new Promise((resolve, reject) => {
    const urlObj = new URL(url);
    const options = {
      hostname: urlObj.hostname,
      port: urlObj.port,
      path: urlObj.pathname + urlObj.search,
      method: method,
      headers: {
        'Content-Type': 'application/json',
        ...headers
      }
    };

    const client = urlObj.protocol === 'https:' ? https : http;
    const req = client.request(options, (res) => {
      let data = '';
      res.on('data', (chunk) => {
        data += chunk;
      });
      res.on('end', () => {
        try {
          const jsonData = JSON.parse(data);
          resolve({
            statusCode: res.statusCode,
            data: jsonData
          });
        } catch (error) {
          resolve({
            statusCode: res.statusCode,
            data: data
          });
        }
      });
    });

    req.on('error', (error) => {
      reject(error);
    });

    if (body) {
      req.write(JSON.stringify(body));
    }
    req.end();
  });
}

// Variables para almacenar IDs creados
let createdJobOfferId = null;
let createdQuestionId = null;
let createdApplicationId = null;
let createdAnswerId = null;

// 1. Obtener token fresco
async function getFreshToken() {
  try {
    console.log('üîë Obteniendo token fresco...');
    
    const loginData = {
      username: 'admin',
      password: 'admin123'
    };
    
    const response = await makeRequest(`${API_BASE_URL}/auth/login`, 'POST', {}, loginData);
    
    if (response.statusCode === 200) {
      console.log('‚úÖ Token obtenido exitosamente');
      return response.data.token;
    } else {
      throw new Error(`Error ${response.statusCode}: ${JSON.stringify(response.data)}`);
    }
  } catch (error) {
    console.error('‚ùå Error obteniendo token:', error.message);
    throw error;
  }
}

// 2. Probar creaci√≥n de puesto de trabajo
async function testCreateJobOffer(token) {
  try {
    console.log('\nüè¢ Probando creaci√≥n de puesto de trabajo...');
    
    const jobOfferData = {
      title: "Desarrollador Full Stack Senior",
      description: "Buscamos un desarrollador full stack senior para liderar proyectos web",
      requirements: "M√≠nimo 3 a√±os de experiencia en desarrollo web, conocimientos en React, Node.js, bases de datos",
      salaryMin: 8000,
      salaryMax: 12000,
      location: "Cochabamba",
      contractType: "FULL_TIME",
      workSchedule: "Lunes a Viernes, 9:00 AM - 6:00 PM",
      workModality: "HYBRID",
      experienceLevel: "SENIOR_LEVEL",
      companyId: "cme8tvypp0000acygt8d4kc80",
      municipality: "Cochabamba",
      department: "Cochabamba",
      skillsRequired: ["React", "Node.js", "MongoDB", "TypeScript"],
      desiredSkills: ["AWS", "Docker", "Kubernetes", "GraphQL"],
      benefits: "Seguro m√©dico, bonos de productividad, capacitaci√≥n, trabajo remoto"
    };
    
    const response = await makeRequest(`${API_BASE_URL}/joboffer`, 'POST', {
      'Authorization': `Bearer ${token}`
    }, jobOfferData);
    
    if (response.statusCode === 201) {
      console.log('‚úÖ Puesto de trabajo creado exitosamente');
      console.log(`üìã ID del puesto: ${response.data.id}`);
      console.log(`üìã T√≠tulo: ${response.data.title}`);
      createdJobOfferId = response.data.id;
      return response.data;
    } else {
      console.log('‚ùå Error creando puesto:', response.data);
      throw new Error(`Error ${response.statusCode}: ${JSON.stringify(response.data)}`);
    }
  } catch (error) {
    console.error('‚ùå Error en creaci√≥n de puesto:', error.message);
    throw error;
  }
}

// 3. Probar creaci√≥n de preguntas para el puesto
async function testCreateJobQuestions(token) {
  try {
    console.log('\n‚ùì Probando creaci√≥n de preguntas para el puesto...');
    
    if (!createdJobOfferId) {
      console.log('‚ö†Ô∏è No hay puesto creado, usando uno existente...');
      createdJobOfferId = "cme8tvypp0000acygt8d4kc80";
    }
    
    const questions = [
      {
        jobOfferId: createdJobOfferId,
        question: "¬øCu√°ntos a√±os de experiencia tienes en desarrollo web?",
        type: "text",
        required: true,
        options: [],
        orderIndex: 1
      },
      {
        jobOfferId: createdJobOfferId,
        question: "¬øQu√© tecnolog√≠as dominas mejor?",
        type: "multiple_choice",
        required: true,
        options: ["React", "Vue.js", "Angular", "Node.js", "Python", "Java"],
        orderIndex: 2
      },
      {
        jobOfferId: createdJobOfferId,
        question: "¬øEst√°s disponible para trabajar en modalidad h√≠brida?",
        type: "boolean",
        required: true,
        options: ["S√≠", "No"],
        orderIndex: 3
      },
      {
        jobOfferId: createdJobOfferId,
        question: "Describe tu experiencia m√°s desafiante en desarrollo",
        type: "text",
        required: false,
        options: [],
        orderIndex: 4
      }
    ];
    
    for (const questionData of questions) {
      const response = await makeRequest(`${API_BASE_URL}/jobquestion`, 'POST', {
        'Authorization': `Bearer ${token}`
      }, questionData);
      
      if (response.statusCode === 201) {
        console.log(`‚úÖ Pregunta creada: ${questionData.question.substring(0, 30)}...`);
        if (!createdQuestionId) {
          createdQuestionId = response.data.id;
        }
      } else {
        console.log('‚ùå Error creando pregunta:', response.data);
      }
    }
    
    return true;
  } catch (error) {
    console.error('‚ùå Error creando preguntas:', error.message);
    throw error;
  }
}

// 4. Probar listado de preguntas
async function testListJobQuestions(token) {
  try {
    console.log('\nüìã Probando listado de preguntas...');
    
    const response = await makeRequest(`${API_BASE_URL}/jobquestion`, 'GET', {
      'Authorization': `Bearer ${token}`
    });
    
    if (response.statusCode === 200) {
      console.log('‚úÖ Preguntas obtenidas exitosamente');
      console.log(`üìã Total de preguntas: ${response.data.length}`);
      
      if (response.data.length > 0) {
        const question = response.data[0];
        console.log(`üìã Primera pregunta: ${question.question}`);
        console.log(`üìã Tipo: ${question.type}`);
        console.log(`üìã Requerida: ${question.required}`);
      }
      
      return response.data;
    } else {
      throw new Error(`Error ${response.statusCode}: ${JSON.stringify(response.data)}`);
    }
  } catch (error) {
    console.error('‚ùå Error obteniendo preguntas:', error.message);
    throw error;
  }
}

// 5. Probar creaci√≥n de aplicaci√≥n con respuestas
async function testCreateJobApplicationWithAnswers(token) {
  try {
    console.log('\nüìù Probando creaci√≥n de aplicaci√≥n con respuestas...');
    
    if (!createdJobOfferId) {
      console.log('‚ö†Ô∏è No hay puesto creado, usando uno existente...');
      createdJobOfferId = "cme8tvypp0000acygt8d4kc80";
    }
    
    // Primero crear la aplicaci√≥n
    const applicationData = {
      jobOfferId: createdJobOfferId,
      coverLetter: "Soy un desarrollador apasionado con 4 a√±os de experiencia en desarrollo web. Me especializo en React y Node.js, y estoy buscando una oportunidad para crecer profesionalmente en una empresa innovadora.",
      cvData: {
        education: "Ingenier√≠a en Sistemas Inform√°ticos",
        experience: "4 a√±os desarrollando aplicaciones web",
        skills: ["React", "Node.js", "MongoDB", "TypeScript", "AWS"],
        certifications: ["AWS Certified Developer", "MongoDB Certified Developer"]
      },
      profileImage: "https://example.com/profile.jpg"
    };
    
    const appResponse = await makeRequest(`${API_BASE_URL}/job-application`, 'POST', {
      'Authorization': `Bearer ${token}`
    }, applicationData);
    
    if (appResponse.statusCode === 201) {
      console.log('‚úÖ Aplicaci√≥n creada exitosamente');
      createdApplicationId = appResponse.data.id;
      
      // Ahora crear respuestas a las preguntas
      const answers = [
        {
          applicationId: createdApplicationId,
          questionId: createdQuestionId || "cme8tvypp0000acygt8d4kc80",
          answer: "4 a√±os de experiencia en desarrollo web"
        },
        {
          applicationId: createdApplicationId,
          questionId: createdQuestionId || "cme8tvypp0000acygt8d4kc80",
          answer: "React, Node.js, TypeScript"
        },
        {
          applicationId: createdApplicationId,
          questionId: createdQuestionId || "cme8tvypp0000acygt8d4kc80",
          answer: "S√≠, estoy disponible para modalidad h√≠brida"
        },
        {
          applicationId: createdApplicationId,
          questionId: createdQuestionId || "cme8tvypp0000acygt8d4kc80",
          answer: "Desarroll√© una aplicaci√≥n de e-commerce que manejaba 10,000 usuarios concurrentes usando React, Node.js y MongoDB. Fue un desaf√≠o t√©cnico importante que me permiti√≥ aprender sobre escalabilidad y optimizaci√≥n."
        }
      ];
      
      for (const answerData of answers) {
        const answerResponse = await makeRequest(`${API_BASE_URL}/jobquestionanswer`, 'POST', {
          'Authorization': `Bearer ${token}`
        }, answerData);
        
        if (answerResponse.statusCode === 201) {
          console.log(`‚úÖ Respuesta creada: ${answerData.answer.substring(0, 30)}...`);
          if (!createdAnswerId) {
            createdAnswerId = answerResponse.data.id;
          }
        } else {
          console.log('‚ùå Error creando respuesta:', answerResponse.data);
        }
      }
      
      return appResponse.data;
    } else {
      console.log('‚ùå Error creando aplicaci√≥n:', appResponse.data);
      throw new Error(`Error ${appResponse.statusCode}: ${JSON.stringify(appResponse.data)}`);
    }
  } catch (error) {
    console.error('‚ùå Error en aplicaci√≥n con respuestas:', error.message);
    throw error;
  }
}

// 6. Probar listado de aplicaciones con respuestas
async function testListApplicationsWithAnswers(token) {
  try {
    console.log('\nüìã Probando listado de aplicaciones con respuestas...');
    
    const response = await makeRequest(`${API_BASE_URL}/job-application`, 'GET', {
      'Authorization': `Bearer ${token}`
    });
    
    if (response.statusCode === 200) {
      console.log('‚úÖ Aplicaciones obtenidas exitosamente');
      console.log(`üìã Total de aplicaciones: ${response.data.length}`);
      
      if (response.data.length > 0) {
        const application = response.data[0];
        console.log(`üìã Aplicaci√≥n ID: ${application.id}`);
        console.log(`üìã Estado: ${application.status}`);
        console.log(`üìã Puesto: ${application.jobOffer?.title}`);
        console.log(`üìã Aplicante: ${application.applicant?.firstName} ${application.applicant?.lastName}`);
      }
      
      return response.data;
    } else {
      throw new Error(`Error ${response.statusCode}: ${JSON.stringify(response.data)}`);
    }
  } catch (error) {
    console.error('‚ùå Error obteniendo aplicaciones:', error.message);
    throw error;
  }
}

// 7. Probar actualizaci√≥n de estado de aplicaci√≥n
async function testUpdateApplicationStatus(token) {
  try {
    console.log('\nüîÑ Probando actualizaci√≥n de estado de aplicaci√≥n...');
    
    if (!createdApplicationId) {
      console.log('‚ö†Ô∏è No hay aplicaci√≥n creada, usando una existente...');
      createdApplicationId = "cme8tvypp0000acygt8d4kc80";
    }
    
    const updateData = {
      status: "PRE_SELECTED",
      notes: "Excelente perfil t√©cnico. Las respuestas a las preguntas muestran experiencia s√≥lida. Programar entrevista t√©cnica.",
      rating: 9
    };
    
    const response = await makeRequest(`${API_BASE_URL}/job-application/${createdApplicationId}`, 'PUT', {
      'Authorization': `Bearer ${token}`
    }, updateData);
    
    if (response.statusCode === 200) {
      console.log('‚úÖ Estado de aplicaci√≥n actualizado exitosamente');
      console.log(`üìã Nuevo estado: ${response.data.status}`);
      console.log(`üìã Notas: ${response.data.notes}`);
      console.log(`üìã Calificaci√≥n: ${response.data.rating}`);
      return response.data;
    } else {
      console.log('‚ùå Error actualizando aplicaci√≥n:', response.data);
      throw new Error(`Error ${response.statusCode}: ${JSON.stringify(response.data)}`);
    }
  } catch (error) {
    console.error('‚ùå Error actualizando aplicaci√≥n:', error.message);
    throw error;
  }
}

// 8. Probar contrataci√≥n final
async function testHireCandidate(token) {
  try {
    console.log('\nüéâ Probando contrataci√≥n de candidato...');
    
    if (!createdApplicationId) {
      console.log('‚ö†Ô∏è No hay aplicaci√≥n creada, usando una existente...');
      createdApplicationId = "cme8tvypp0000acygt8d4kc80";
    }
    
    const hireData = {
      status: "HIRED",
      notes: "Candidato contratado despu√©s de entrevista exitosa. Iniciar proceso de onboarding y firma de contrato.",
      rating: 10
    };
    
    const response = await makeRequest(`${API_BASE_URL}/job-application/${createdApplicationId}`, 'PUT', {
      'Authorization': `Bearer ${token}`
    }, hireData);
    
    if (response.statusCode === 200) {
      console.log('‚úÖ Candidato contratado exitosamente');
      console.log(`üìã Estado final: ${response.data.status}`);
      console.log(`üìã Notas: ${response.data.notes}`);
      console.log(`üìã Calificaci√≥n final: ${response.data.rating}`);
      return response.data;
    } else {
      console.log('‚ùå Error contratando candidato:', response.data);
      throw new Error(`Error ${response.statusCode}: ${JSON.stringify(response.data)}`);
    }
  } catch (error) {
    console.error('‚ùå Error contratando candidato:', error.message);
    throw error;
  }
}

// Funci√≥n principal
async function main() {
  console.log('üöÄ Iniciando pruebas del sistema completo de puestos de trabajo...\n');
  
  try {
    // Obtener token fresco
    const token = await getFreshToken();
    
    // Ejecutar todas las pruebas
    await testCreateJobOffer(token);
    await testCreateJobQuestions(token);
    await testListJobQuestions(token);
    await testCreateJobApplicationWithAnswers(token);
    await testListApplicationsWithAnswers(token);
    await testUpdateApplicationStatus(token);
    await testHireCandidate(token);
    
    console.log('\n‚úÖ Todas las pruebas completadas exitosamente');
    console.log('\nüìù Resumen del flujo completo:');
    console.log('1. ‚úÖ Crear puesto de trabajo');
    console.log('2. ‚úÖ Agregar preguntas personalizadas al puesto');
    console.log('3. ‚úÖ Candidato aplica con CV y carta de presentaci√≥n');
    console.log('4. ‚úÖ Candidato responde preguntas personalizadas');
    console.log('5. ‚úÖ Empresa revisa aplicaci√≥n completa');
    console.log('6. ‚úÖ Empresa preselecciona candidato');
    console.log('7. ‚úÖ Empresa contrata candidato');
    
  } catch (error) {
    console.error('\n‚ùå Error en las pruebas:', error.message);
  }
}

main();
