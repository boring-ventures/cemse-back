const { Client } = require('minio');

// Configuraci√≥n de MinIO
const minioClient = new Client({
  endPoint: '127.0.0.1',
  port: 9000,
  useSSL: false,
  accessKey: 'minioadmin',
  secretKey: 'minioadmin'
});

// Funci√≥n para verificar y configurar pol√≠ticas
async function checkAndSetPolicies() {
  try {
    console.log('üîç Verificando pol√≠ticas de buckets...\n');
    
    const bucketsToCheck = ['videos', 'images'];
    
    for (const bucketName of bucketsToCheck) {
      try {
        console.log(`üìã Verificando bucket: ${bucketName}`);
        
        // Verificar si el bucket existe
        const exists = await minioClient.bucketExists(bucketName);
        if (!exists) {
          console.log(`‚ùå Bucket '${bucketName}' no existe`);
          continue;
        }
        
        // Intentar obtener la pol√≠tica actual
        try {
          const currentPolicy = await minioClient.getBucketPolicy(bucketName);
          console.log(`‚ÑπÔ∏è Pol√≠tica actual de '${bucketName}':`, currentPolicy);
        } catch (error) {
          console.log(`‚ö†Ô∏è No hay pol√≠tica configurada para '${bucketName}'`);
        }
        
        // Configurar pol√≠tica p√∫blica
        const publicPolicy = {
          Version: '2012-10-17',
          Statement: [
            {
              Effect: 'Allow',
              Principal: { AWS: ['*'] },
              Action: ['s3:GetObject'],
              Resource: [`arn:aws:s3:::${bucketName}/*`]
            }
          ]
        };
        
        await minioClient.setBucketPolicy(bucketName, JSON.stringify(publicPolicy));
        console.log(`‚úÖ Pol√≠tica p√∫blica configurada para '${bucketName}'\n`);
        
      } catch (error) {
        console.error(`‚ùå Error con bucket '${bucketName}':`, error.message);
      }
    }
    
    console.log('üéâ Verificaci√≥n de pol√≠ticas completada!');
    
  } catch (error) {
    console.error('‚ùå Error verificando pol√≠ticas:', error);
  }
}

// Funci√≥n para probar acceso p√∫blico
async function testPublicAccess() {
  try {
    console.log('\nüß™ Probando acceso p√∫blico...');
    
    // Crear un archivo de prueba
    const testData = Buffer.from('Archivo de prueba para acceso p√∫blico');
    const objectName = `public-test-${Date.now()}.txt`;
    
    // Subir archivo
    await minioClient.putObject('videos', objectName, testData, testData.length, {
      'Content-Type': 'text/plain'
    });
    
    console.log(`‚úÖ Archivo subido: ${objectName}`);
    
    // Generar URL p√∫blica
    const publicUrl = `http://127.0.0.1:9000/videos/${objectName}`;
    console.log(`üîó URL p√∫blica: ${publicUrl}`);
    
    // Probar acceso con fetch (simular acceso desde navegador)
    try {
      const response = await fetch(publicUrl);
      if (response.ok) {
        const content = await response.text();
        console.log(`‚úÖ Acceso p√∫blico exitoso! Contenido: "${content}"`);
      } else {
        console.log(`‚ùå Error de acceso p√∫blico: ${response.status} ${response.statusText}`);
      }
    } catch (fetchError) {
      console.log(`‚ö†Ô∏è No se pudo probar acceso p√∫blico (puede ser normal en Node.js): ${fetchError.message}`);
    }
    
    return publicUrl;
    
  } catch (error) {
    console.error('‚ùå Error en prueba de acceso p√∫blico:', error);
  }
}

// Funci√≥n principal
async function main() {
  try {
    console.log('üöÄ Iniciando verificaci√≥n de MinIO...\n');
    
    // Verificar conexi√≥n
    console.log('üîç Verificando conexi√≥n con MinIO...');
    await minioClient.listBuckets();
    console.log('‚úÖ Conexi√≥n exitosa con MinIO\n');
    
    // Verificar y configurar pol√≠ticas
    await checkAndSetPolicies();
    
    // Probar acceso p√∫blico
    await testPublicAccess();
    
    console.log('\nüìã Resumen:');
    console.log('üåê Consola Web: http://127.0.0.1:9001');
    console.log('üîë Usuario: minioadmin');
    console.log('üîê Contrase√±a: minioadmin');
    console.log('üìÅ Buckets p√∫blicos: videos, images');
    
  } catch (error) {
    console.error('‚ùå Error:', error.message);
  }
}

// Ejecutar si es el archivo principal
if (require.main === module) {
  main();
}

module.exports = {
  checkAndSetPolicies,
  testPublicAccess
};
