const axios = require('axios');
const { PrismaClient } = require('@prisma/client');

const prisma = new PrismaClient();

// Configuraci√≥n
const API_BASE_URL = 'http://localhost:3001/api';
const TOKEN = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6ImNtZThjcm5wZTAwMDB5NGp6eTU5ZG9yZjAiLCJlbWFpbCI6Imp1YW5AZXhhbXBsZS5jb20iLCJyb2xlIjoiWU9VVEgiLCJ0eXBlIjoidXNlciIsImlhdCI6MTc1NTU0MzQzNSwiZXhwIjoxNzU1NjI5ODM1fQ.Ej8Ej8Ej8Ej8Ej8Ej8Ej8Ej8Ej8Ej8Ej8Ej8Ej8Ej8';

// Funci√≥n para obtener un m√≥dulo con lecciones
async function getModuleWithLessons() {
  try {
    const module = await prisma.courseModule.findFirst({
      where: {
        hasCertificate: true
      },
      include: {
        lessons: {
          select: {
            id: true,
            title: true,
            orderIndex: true
          },
          orderBy: {
            orderIndex: 'asc'
          }
        },
        course: {
          select: {
            id: true,
            title: true
          }
        }
      }
    });

    if (!module) {
      console.log('‚ùå No se encontr√≥ ning√∫n m√≥dulo con certificados habilitados');
      return null;
    }

    console.log(`üìö M√≥dulo encontrado: ${module.title}`);
    console.log(`üéì Curso: ${module.course.title}`);
    console.log(`üìã Lecciones: ${module.lessons.length}`);
    
    return module;
  } catch (error) {
    console.error('‚ùå Error obteniendo m√≥dulo:', error);
    return null;
  }
}

// Funci√≥n para obtener un usuario joven
async function getYouthUser() {
  try {
    const user = await prisma.profile.findFirst({
      where: {
        role: 'YOUTH'
      },
      select: {
        userId: true,
        firstName: true,
        lastName: true,
        email: true
      }
    });

    if (!user) {
      console.log('‚ùå No se encontr√≥ ning√∫n usuario joven');
      return null;
    }

    console.log(`üë§ Usuario encontrado: ${user.firstName} ${user.lastName}`);
    return user;
  } catch (error) {
    console.error('‚ùå Error obteniendo usuario:', error);
    return null;
  }
}

// Funci√≥n para crear enrollment
async function createEnrollment(userId, courseId) {
  try {
    const enrollment = await prisma.courseEnrollment.create({
      data: {
        studentId: userId,
        courseId: courseId,
        enrolledAt: new Date(),
        status: 'ACTIVE'
      }
    });

    console.log(`‚úÖ Enrollment creado: ${enrollment.id}`);
    return enrollment;
  } catch (error) {
    console.error('‚ùå Error creando enrollment:', error);
    return null;
  }
}

// Funci√≥n para completar lecciones
async function completeLessons(enrollmentId, lessons) {
  try {
    console.log(`\nüìö Completando lecciones del m√≥dulo...`);
    
    for (let i = 0; i < lessons.length; i++) {
      const lesson = lessons[i];
      
      console.log(`\nüìñ Completando lecci√≥n ${i + 1}/${lessons.length}: ${lesson.title}`);
      
      const response = await axios.post(`${API_BASE_URL}/lessonprogress`, {
        enrollmentId: enrollmentId,
        lessonId: lesson.id,
        isCompleted: true,
        timeSpent: Math.floor(Math.random() * 300) + 120, // 2-7 minutos
        videoProgress: 1.0
      }, {
        headers: {
          'Authorization': `Bearer ${TOKEN}`,
          'Content-Type': 'application/json'
        }
      });

      if (response.status === 201 || response.status === 200) {
        console.log(`‚úÖ Lecci√≥n completada: ${lesson.title}`);
        
        // Esperar un poco entre lecciones para que se procese
        await new Promise(resolve => setTimeout(resolve, 1000));
      } else {
        console.log(`‚ùå Error completando lecci√≥n: ${response.status}`);
      }
    }
  } catch (error) {
    console.error('‚ùå Error completando lecciones:', error.response?.data || error.message);
  }
}

// Funci√≥n para verificar certificados generados
async function checkGeneratedCertificates(userId, moduleId) {
  try {
    console.log(`\nüîç Verificando certificados generados...`);
    
    const certificates = await prisma.moduleCertificate.findMany({
      where: {
        studentId: userId,
        moduleId: moduleId
      },
      include: {
        module: {
          select: {
            title: true,
            course: {
              select: {
                title: true
              }
            }
          }
        },
        student: {
          select: {
            firstName: true,
            lastName: true
          }
        }
      }
    });

    if (certificates.length > 0) {
      console.log(`\nüéâ ¬°Certificados generados exitosamente!`);
      certificates.forEach((cert, index) => {
        console.log(`\nüìú Certificado ${index + 1}:`);
        console.log(`   üìö M√≥dulo: ${cert.module.title}`);
        console.log(`   üéì Curso: ${cert.module.course.title}`);
        console.log(`   üë§ Estudiante: ${cert.student.firstName} ${cert.student.lastName}`);
        console.log(`   üìä Calificaci√≥n: ${cert.grade}%`);
        console.log(`   üìÖ Completado: ${new Date(cert.completedAt).toLocaleDateString()}`);
        console.log(`   üîó URL: ${cert.certificateUrl}`);
      });
    } else {
      console.log(`\n‚ùå No se generaron certificados autom√°ticamente`);
    }

    return certificates;
  } catch (error) {
    console.error('‚ùå Error verificando certificados:', error);
    return [];
  }
}

// Funci√≥n principal
async function main() {
  try {
    console.log('üöÄ === PRUEBA DE GENERACI√ìN AUTOM√ÅTICA DE CERTIFICADOS ===\n');
    
    // 1. Obtener m√≥dulo con lecciones
    const module = await getModuleWithLessons();
    if (!module) return;
    
    // 2. Obtener usuario joven
    const user = await getYouthUser();
    if (!user) return;
    
    // 3. Crear enrollment
    const enrollment = await createEnrollment(user.userId, module.course.id);
    if (!enrollment) return;
    
    // 4. Completar todas las lecciones del m√≥dulo
    await completeLessons(enrollment.id, module.lessons);
    
    // 5. Esperar un poco para que se procese la generaci√≥n del certificado
    console.log('\n‚è≥ Esperando procesamiento...');
    await new Promise(resolve => setTimeout(resolve, 3000));
    
    // 6. Verificar si se gener√≥ el certificado
    const certificates = await checkGeneratedCertificates(user.userId, module.id);
    
    console.log('\nüéâ === PRUEBA COMPLETADA ===');
    console.log(`üìã Resumen:`);
    console.log(`   üìö M√≥dulo: ${module.title}`);
    console.log(`   üë§ Estudiante: ${user.firstName} ${user.lastName}`);
    console.log(`   üìñ Lecciones completadas: ${module.lessons.length}`);
    console.log(`   üèÜ Certificados generados: ${certificates.length}`);
    
  } catch (error) {
    console.error('\nüí• === ERROR EN LA PRUEBA ===');
    console.error(error.message);
  } finally {
    await prisma.$disconnect();
  }
}

// Ejecutar si es el archivo principal
if (require.main === module) {
  main();
}
