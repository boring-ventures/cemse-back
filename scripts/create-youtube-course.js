const axios = require('axios');

// Configuraci√≥n
const API_BASE_URL = 'http://localhost:3001';
const AUTH_TOKEN = 'your-auth-token-here'; // Reemplazar con token v√°lido

// Videos de YouTube proporcionados
const YOUTUBE_VIDEOS = {
  preview: 'https://www.youtube.com/watch?v=yEIKwtVRKuQ&list=RDyEIKwtVRKuQ&start_radio=1',
  lesson1: 'https://www.youtube.com/watch?v=uY5406XeobY',
  lesson2: 'https://www.youtube.com/watch?v=9gWIIIr2Asw&list=RD9gWIIIr2Asw&start_radio=1'
};

// Funci√≥n para extraer el ID del video de YouTube
function extractYouTubeId(url) {
  const regex = /(?:youtube\.com\/watch\?v=|youtu\.be\/|youtube\.com\/embed\/)([^&\n?#]+)/;
  const match = url.match(regex);
  return match ? match[1] : null;
}

// Funci√≥n para crear un curso
async function createCourse() {
  try {
    console.log('üìö Creando curso con videos de YouTube...');
    
    const courseData = {
      title: "Curso de M√∫sica y Desarrollo Personal",
      slug: "curso-musica-desarrollo-personal",
      description: "Un curso completo que combina m√∫sica y desarrollo personal para mejorar tu bienestar y habilidades.",
      shortDescription: "Aprende m√∫sica y desarrollo personal en un solo curso",
      thumbnail: "https://img.youtube.com/vi/yEIKwtVRKuQ/maxresdefault.jpg",
      videoPreview: YOUTUBE_VIDEOS.preview,
      objectives: [
        "Aprender t√©cnicas de m√∫sica para relajaci√≥n",
        "Desarrollar habilidades de autoconocimiento",
        "Mejorar el bienestar emocional",
        "Practicar mindfulness a trav√©s de la m√∫sica"
      ],
      prerequisites: [
        "No se requiere experiencia previa",
        "Dispositivo para reproducir videos",
        "Ganas de aprender y mejorar"
      ],
      duration: 45, // duraci√≥n total en minutos
      level: "BEGINNER",
      category: "SOFT_SKILLS",
      isMandatory: false,
      isActive: true,
      price: 0, // curso gratuito
      rating: 0,
      studentsCount: 0,
      completionRate: 0,
      totalLessons: 2,
      totalQuizzes: 0,
      totalResources: 0,
      tags: ["m√∫sica", "desarrollo personal", "mindfulness", "bienestar"],
      certification: true,
      includedMaterials: [
        "Videos de YouTube",
        "Material de apoyo",
        "Certificado de finalizaci√≥n"
      ],
      instructorId: null, // se puede asignar despu√©s
      institutionName: "Plataforma de Aprendizaje"
    };
    
    const response = await axios.post(`${API_BASE_URL}/course`, courseData, {
      headers: {
        'Authorization': `Bearer ${AUTH_TOKEN}`,
        'Content-Type': 'application/json'
      }
    });
    
    console.log('‚úÖ Curso creado exitosamente:', response.data);
    return response.data;
    
  } catch (error) {
    console.error('‚ùå Error creando curso:', error.response?.data || error.message);
    throw error;
  }
}

// Funci√≥n para crear un m√≥dulo
async function createModule(courseId, title, description, orderIndex) {
  try {
    console.log(`üìñ Creando m√≥dulo: ${title}...`);
    
    const moduleData = {
      courseId: courseId,
      title: title,
      description: description,
      orderIndex: orderIndex,
      estimatedDuration: 20, // duraci√≥n estimada en minutos
      isLocked: false,
      prerequisites: []
    };
    
    const response = await axios.post(`${API_BASE_URL}/coursemodule`, moduleData, {
      headers: {
        'Authorization': `Bearer ${AUTH_TOKEN}`,
        'Content-Type': 'application/json'
      }
    });
    
    console.log('‚úÖ M√≥dulo creado exitosamente:', response.data);
    return response.data;
    
  } catch (error) {
    console.error('‚ùå Error creando m√≥dulo:', error.response?.data || error.message);
    throw error;
  }
}

// Funci√≥n para crear una lecci√≥n con video de YouTube
async function createYouTubeLesson(moduleId, title, description, youtubeUrl, orderIndex) {
  try {
    console.log(`üé¨ Creando lecci√≥n: ${title}...`);
    
    const lessonData = {
      title: title,
      description: description,
      content: `En esta lecci√≥n aprender√°s a trav√©s del video de YouTube. Aseg√∫rate de ver el video completo para obtener el m√°ximo beneficio.`,
      moduleId: moduleId,
      contentType: "VIDEO",
      videoUrl: youtubeUrl,
      duration: 15, // duraci√≥n estimada en minutos
      orderIndex: orderIndex,
      isRequired: true,
      isPreview: false
    };
    
    const response = await axios.post(`${API_BASE_URL}/lessons`, lessonData, {
      headers: {
        'Authorization': `Bearer ${AUTH_TOKEN}`,
        'Content-Type': 'application/json'
      }
    });
    
    console.log('‚úÖ Lecci√≥n creada exitosamente:', response.data);
    return response.data;
    
  } catch (error) {
    console.error('‚ùå Error creando lecci√≥n:', error.response?.data || error.message);
    throw error;
  }
}

// Funci√≥n para obtener informaci√≥n del video de YouTube
async function getYouTubeVideoInfo(youtubeUrl) {
  const videoId = extractYouTubeId(youtubeUrl);
  if (!videoId) {
    throw new Error('URL de YouTube inv√°lida');
  }
  
  return {
    videoId: videoId,
    embedUrl: `https://www.youtube.com/embed/${videoId}`,
    thumbnailUrl: `https://img.youtube.com/vi/${videoId}/maxresdefault.jpg`,
    watchUrl: youtubeUrl
  };
}

// Funci√≥n para obtener un curso con todas sus lecciones
async function getCourseWithLessons(courseId) {
  try {
    console.log('üìã Obteniendo curso con lecciones...');
    
    const response = await axios.get(`${API_BASE_URL}/course/${courseId}/full`, {
      headers: {
        'Authorization': `Bearer ${AUTH_TOKEN}`
      }
    });
    
    console.log('‚úÖ Curso obtenido exitosamente');
    return response.data;
    
  } catch (error) {
    console.error('‚ùå Error obteniendo curso:', error.response?.data || error.message);
    throw error;
  }
}

// Funci√≥n principal
async function main() {
  try {
    console.log('üéµ Iniciando creaci√≥n de curso con videos de YouTube...\n');
    
    // 1. Crear el curso
    const course = await createCourse();
    
    // 2. Crear el m√≥dulo
    const module = await createModule(
      course.id,
      "Fundamentos de M√∫sica y Desarrollo Personal",
      "En este m√≥dulo aprender√°s los fundamentos b√°sicos de la m√∫sica y c√≥mo aplicarla para tu desarrollo personal.",
      1
    );
    
    // 3. Crear las lecciones con videos de YouTube
    const lesson1 = await createYouTubeLesson(
      module.id,
      "Introducci√≥n a la M√∫sica para el Desarrollo Personal",
      "Aprende c√≥mo la m√∫sica puede transformar tu vida y mejorar tu bienestar emocional.",
      YOUTUBE_VIDEOS.lesson1,
      1
    );
    
    const lesson2 = await createYouTubeLesson(
      module.id,
      "T√©cnicas Avanzadas de M√∫sica y Mindfulness",
      "Explora t√©cnicas avanzadas para usar la m√∫sica como herramienta de mindfulness y meditaci√≥n.",
      YOUTUBE_VIDEOS.lesson2,
      2
    );
    
    // 4. Obtener informaci√≥n de los videos
    const videoInfo = {
      preview: await getYouTubeVideoInfo(YOUTUBE_VIDEOS.preview),
      lesson1: await getYouTubeVideoInfo(YOUTUBE_VIDEOS.lesson1),
      lesson2: await getYouTubeVideoInfo(YOUTUBE_VIDEOS.lesson2)
    };
    
    // 5. Obtener el curso completo
    const fullCourse = await getCourseWithLessons(course.id);
    
    console.log('\nüéâ Curso creado exitosamente!');
    console.log('üìä Resumen:');
    console.log(`- Curso ID: ${course.id}`);
    console.log(`- M√≥dulo ID: ${module.id}`);
    console.log(`- Lecci√≥n 1 ID: ${lesson1.id}`);
    console.log(`- Lecci√≥n 2 ID: ${lesson2.id}`);
    console.log('\nüìπ Informaci√≥n de Videos:');
    console.log('Preview:', videoInfo.preview);
    console.log('Lecci√≥n 1:', videoInfo.lesson1);
    console.log('Lecci√≥n 2:', videoInfo.lesson2);
    
    // 6. Mostrar URLs para el frontend
    console.log('\nüîó URLs para el Frontend:');
    console.log(`- Obtener curso completo: GET ${API_BASE_URL}/course/${course.id}/full`);
    console.log(`- Obtener solo preview: GET ${API_BASE_URL}/course/${course.id}`);
    console.log(`- Obtener lecciones del m√≥dulo: GET ${API_BASE_URL}/lessons/module/${module.id}`);
    
    return {
      course: fullCourse,
      videoInfo: videoInfo
    };
    
  } catch (error) {
    console.error('\nüí• Error en la creaci√≥n del curso:', error.message);
    throw error;
  }
}

// Ejecutar si es el archivo principal
if (require.main === module) {
  main();
}

module.exports = {
  createCourse,
  createModule,
  createYouTubeLesson,
  getYouTubeVideoInfo,
  getCourseWithLessons,
  YOUTUBE_VIDEOS
};
