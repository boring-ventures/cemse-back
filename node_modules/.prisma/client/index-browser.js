
Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('@prisma/client/runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 5.22.0
 * Query Engine version: 605197351a3c8bdd595af2d2a9bc3025bca48ea2
 */
Prisma.prismaVersion = {
  client: "5.22.0",
  engine: "605197351a3c8bdd595af2d2a9bc3025bca48ea2"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.NotFoundError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`NotFoundError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.ProfileScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  avatarUrl: 'avatarUrl',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  active: 'active',
  status: 'status',
  role: 'role',
  firstName: 'firstName',
  lastName: 'lastName',
  email: 'email',
  phone: 'phone',
  address: 'address',
  municipality: 'municipality',
  department: 'department',
  country: 'country',
  birthDate: 'birthDate',
  gender: 'gender',
  documentType: 'documentType',
  documentNumber: 'documentNumber',
  educationLevel: 'educationLevel',
  currentInstitution: 'currentInstitution',
  graduationYear: 'graduationYear',
  isStudying: 'isStudying',
  educationHistory: 'educationHistory',
  currentDegree: 'currentDegree',
  universityName: 'universityName',
  universityStartDate: 'universityStartDate',
  universityEndDate: 'universityEndDate',
  universityStatus: 'universityStatus',
  gpa: 'gpa',
  academicAchievements: 'academicAchievements',
  skills: 'skills',
  interests: 'interests',
  workExperience: 'workExperience',
  companyName: 'companyName',
  taxId: 'taxId',
  legalRepresentative: 'legalRepresentative',
  businessSector: 'businessSector',
  companySize: 'companySize',
  companyDescription: 'companyDescription',
  website: 'website',
  foundedYear: 'foundedYear',
  institutionName: 'institutionName',
  institutionType: 'institutionType',
  serviceArea: 'serviceArea',
  specialization: 'specialization',
  institutionDescription: 'institutionDescription',
  profileCompletion: 'profileCompletion',
  lastLoginAt: 'lastLoginAt',
  parentalConsent: 'parentalConsent',
  parentEmail: 'parentEmail',
  consentDate: 'consentDate',
  achievements: 'achievements',
  jobTitle: 'jobTitle',
  addressLine: 'addressLine',
  cityState: 'cityState',
  languages: 'languages',
  websites: 'websites',
  skillsWithLevel: 'skillsWithLevel',
  extracurricularActivities: 'extracurricularActivities',
  projects: 'projects',
  coverLetterRecipient: 'coverLetterRecipient',
  coverLetterSubject: 'coverLetterSubject',
  coverLetterContent: 'coverLetterContent',
  coverLetterTemplate: 'coverLetterTemplate',
  companyId: 'companyId'
};

exports.Prisma.JobOfferScalarFieldEnum = {
  id: 'id',
  title: 'title',
  description: 'description',
  requirements: 'requirements',
  benefits: 'benefits',
  salaryMin: 'salaryMin',
  salaryMax: 'salaryMax',
  salaryCurrency: 'salaryCurrency',
  contractType: 'contractType',
  workSchedule: 'workSchedule',
  workModality: 'workModality',
  location: 'location',
  latitude: 'latitude',
  longitude: 'longitude',
  images: 'images',
  logo: 'logo',
  municipality: 'municipality',
  department: 'department',
  experienceLevel: 'experienceLevel',
  educationRequired: 'educationRequired',
  skillsRequired: 'skillsRequired',
  desiredSkills: 'desiredSkills',
  applicationDeadline: 'applicationDeadline',
  isActive: 'isActive',
  status: 'status',
  viewsCount: 'viewsCount',
  applicationsCount: 'applicationsCount',
  featured: 'featured',
  expiresAt: 'expiresAt',
  publishedAt: 'publishedAt',
  companyId: 'companyId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.JobQuestionScalarFieldEnum = {
  id: 'id',
  jobOfferId: 'jobOfferId',
  question: 'question',
  type: 'type',
  required: 'required',
  options: 'options',
  orderIndex: 'orderIndex'
};

exports.Prisma.JobApplicationScalarFieldEnum = {
  id: 'id',
  applicantId: 'applicantId',
  jobOfferId: 'jobOfferId',
  coverLetter: 'coverLetter',
  cvData: 'cvData',
  cvFile: 'cvFile',
  coverLetterFile: 'coverLetterFile',
  profileImage: 'profileImage',
  status: 'status',
  appliedAt: 'appliedAt',
  reviewedAt: 'reviewedAt',
  notes: 'notes',
  rating: 'rating',
  decisionReason: 'decisionReason'
};

exports.Prisma.JobQuestionAnswerScalarFieldEnum = {
  id: 'id',
  applicationId: 'applicationId',
  questionId: 'questionId',
  answer: 'answer'
};

exports.Prisma.JobApplicationMessageScalarFieldEnum = {
  id: 'id',
  applicationId: 'applicationId',
  senderId: 'senderId',
  senderType: 'senderType',
  content: 'content',
  messageType: 'messageType',
  status: 'status',
  createdAt: 'createdAt',
  readAt: 'readAt'
};

exports.Prisma.CourseScalarFieldEnum = {
  id: 'id',
  title: 'title',
  slug: 'slug',
  description: 'description',
  shortDescription: 'shortDescription',
  thumbnail: 'thumbnail',
  videoPreview: 'videoPreview',
  objectives: 'objectives',
  prerequisites: 'prerequisites',
  duration: 'duration',
  level: 'level',
  category: 'category',
  isMandatory: 'isMandatory',
  isActive: 'isActive',
  price: 'price',
  rating: 'rating',
  studentsCount: 'studentsCount',
  completionRate: 'completionRate',
  totalLessons: 'totalLessons',
  totalQuizzes: 'totalQuizzes',
  totalResources: 'totalResources',
  tags: 'tags',
  certification: 'certification',
  includedMaterials: 'includedMaterials',
  instructorId: 'instructorId',
  institutionName: 'institutionName',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  publishedAt: 'publishedAt'
};

exports.Prisma.CourseModuleScalarFieldEnum = {
  id: 'id',
  courseId: 'courseId',
  title: 'title',
  description: 'description',
  orderIndex: 'orderIndex',
  estimatedDuration: 'estimatedDuration',
  isLocked: 'isLocked',
  prerequisites: 'prerequisites',
  hasCertificate: 'hasCertificate',
  certificateTemplate: 'certificateTemplate'
};

exports.Prisma.LessonScalarFieldEnum = {
  id: 'id',
  moduleId: 'moduleId',
  title: 'title',
  description: 'description',
  content: 'content',
  contentType: 'contentType',
  videoUrl: 'videoUrl',
  duration: 'duration',
  orderIndex: 'orderIndex',
  isRequired: 'isRequired',
  isPreview: 'isPreview',
  attachments: 'attachments'
};

exports.Prisma.CourseEnrollmentScalarFieldEnum = {
  id: 'id',
  studentId: 'studentId',
  courseId: 'courseId',
  enrolledAt: 'enrolledAt',
  startedAt: 'startedAt',
  completedAt: 'completedAt',
  status: 'status',
  progress: 'progress',
  currentModuleId: 'currentModuleId',
  currentLessonId: 'currentLessonId',
  certificateUrl: 'certificateUrl',
  timeSpent: 'timeSpent',
  certificateIssued: 'certificateIssued',
  finalGrade: 'finalGrade',
  moduleProgress: 'moduleProgress',
  quizResults: 'quizResults'
};

exports.Prisma.LessonProgressScalarFieldEnum = {
  id: 'id',
  enrollmentId: 'enrollmentId',
  lessonId: 'lessonId',
  isCompleted: 'isCompleted',
  completedAt: 'completedAt',
  timeSpent: 'timeSpent',
  videoProgress: 'videoProgress',
  lastWatchedAt: 'lastWatchedAt'
};

exports.Prisma.QuizScalarFieldEnum = {
  id: 'id',
  courseId: 'courseId',
  lessonId: 'lessonId',
  title: 'title',
  description: 'description',
  timeLimit: 'timeLimit',
  passingScore: 'passingScore',
  showCorrectAnswers: 'showCorrectAnswers',
  isActive: 'isActive'
};

exports.Prisma.QuizQuestionScalarFieldEnum = {
  id: 'id',
  quizId: 'quizId',
  question: 'question',
  type: 'type',
  options: 'options',
  correctAnswer: 'correctAnswer',
  explanation: 'explanation',
  points: 'points',
  orderIndex: 'orderIndex'
};

exports.Prisma.QuizAttemptScalarFieldEnum = {
  id: 'id',
  enrollmentId: 'enrollmentId',
  quizId: 'quizId',
  studentId: 'studentId',
  startedAt: 'startedAt',
  completedAt: 'completedAt',
  score: 'score',
  passed: 'passed',
  timeSpent: 'timeSpent'
};

exports.Prisma.QuizAnswerScalarFieldEnum = {
  id: 'id',
  attemptId: 'attemptId',
  questionId: 'questionId',
  answer: 'answer',
  isCorrect: 'isCorrect',
  timeSpent: 'timeSpent'
};

exports.Prisma.CertificateScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  courseId: 'courseId',
  template: 'template',
  issuedAt: 'issuedAt',
  verificationCode: 'verificationCode',
  digitalSignature: 'digitalSignature',
  isValid: 'isValid',
  url: 'url'
};

exports.Prisma.StudentNoteScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  lessonId: 'lessonId',
  content: 'content',
  timestamp: 'timestamp',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.DiscussionScalarFieldEnum = {
  id: 'id',
  lessonId: 'lessonId',
  userId: 'userId',
  content: 'content',
  parentId: 'parentId',
  likes: 'likes',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.EntrepreneurshipScalarFieldEnum = {
  id: 'id',
  ownerId: 'ownerId',
  name: 'name',
  description: 'description',
  category: 'category',
  subcategory: 'subcategory',
  businessStage: 'businessStage',
  logo: 'logo',
  images: 'images',
  website: 'website',
  email: 'email',
  phone: 'phone',
  address: 'address',
  municipality: 'municipality',
  department: 'department',
  socialMedia: 'socialMedia',
  founded: 'founded',
  employees: 'employees',
  annualRevenue: 'annualRevenue',
  businessModel: 'businessModel',
  targetMarket: 'targetMarket',
  isPublic: 'isPublic',
  isActive: 'isActive',
  viewsCount: 'viewsCount',
  rating: 'rating',
  reviewsCount: 'reviewsCount',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.BusinessPlanScalarFieldEnum = {
  id: 'id',
  entrepreneurshipId: 'entrepreneurshipId',
  executiveSummary: 'executiveSummary',
  missionStatement: 'missionStatement',
  visionStatement: 'visionStatement',
  marketAnalysis: 'marketAnalysis',
  targetMarket: 'targetMarket',
  competitiveAnalysis: 'competitiveAnalysis',
  businessModelCanvas: 'businessModelCanvas',
  revenueStreams: 'revenueStreams',
  costStructure: 'costStructure',
  marketingStrategy: 'marketingStrategy',
  pricingStrategy: 'pricingStrategy',
  salesStrategy: 'salesStrategy',
  initialInvestment: 'initialInvestment',
  monthlyExpenses: 'monthlyExpenses',
  revenueProjection: 'revenueProjection',
  breakEvenPoint: 'breakEvenPoint',
  roi: 'roi',
  riskAnalysis: 'riskAnalysis',
  mitigationStrategies: 'mitigationStrategies',
  operationalPlan: 'operationalPlan',
  managementTeam: 'managementTeam',
  tripleImpactAssessment: 'tripleImpactAssessment',
  isCompleted: 'isCompleted',
  lastSection: 'lastSection',
  completionPercentage: 'completionPercentage',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.NewsArticleScalarFieldEnum = {
  id: 'id',
  title: 'title',
  content: 'content',
  summary: 'summary',
  imageUrl: 'imageUrl',
  videoUrl: 'videoUrl',
  authorId: 'authorId',
  authorName: 'authorName',
  authorType: 'authorType',
  authorLogo: 'authorLogo',
  status: 'status',
  priority: 'priority',
  featured: 'featured',
  tags: 'tags',
  category: 'category',
  publishedAt: 'publishedAt',
  expiresAt: 'expiresAt',
  viewCount: 'viewCount',
  likeCount: 'likeCount',
  commentCount: 'commentCount',
  targetAudience: 'targetAudience',
  region: 'region',
  relatedLinks: 'relatedLinks',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.NewsCommentScalarFieldEnum = {
  id: 'id',
  newsId: 'newsId',
  userId: 'userId',
  userName: 'userName',
  userAvatar: 'userAvatar',
  content: 'content',
  parentId: 'parentId',
  likes: 'likes',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ResourceScalarFieldEnum = {
  id: 'id',
  title: 'title',
  description: 'description',
  type: 'type',
  category: 'category',
  format: 'format',
  downloadUrl: 'downloadUrl',
  externalUrl: 'externalUrl',
  thumbnail: 'thumbnail',
  author: 'author',
  publishedDate: 'publishedDate',
  downloads: 'downloads',
  rating: 'rating',
  tags: 'tags',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  username: 'username',
  password: 'password',
  role: 'role',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.RefreshTokenScalarFieldEnum = {
  id: 'id',
  token: 'token',
  userId: 'userId',
  expiresAt: 'expiresAt',
  revoked: 'revoked',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ExternalApiKeyScalarFieldEnum = {
  id: 'id',
  key: 'key',
  name: 'name',
  active: 'active',
  createdAt: 'createdAt',
  revokedAt: 'revokedAt'
};

exports.Prisma.InstitutionScalarFieldEnum = {
  id: 'id',
  name: 'name',
  department: 'department',
  region: 'region',
  population: 'population',
  mayorName: 'mayorName',
  mayorEmail: 'mayorEmail',
  mayorPhone: 'mayorPhone',
  address: 'address',
  website: 'website',
  isActive: 'isActive',
  username: 'username',
  password: 'password',
  email: 'email',
  phone: 'phone',
  institutionType: 'institutionType',
  customType: 'customType',
  primaryColor: 'primaryColor',
  secondaryColor: 'secondaryColor',
  createdBy: 'createdBy',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.MunicipalityScalarFieldEnum = {
  id: 'id',
  name: 'name',
  department: 'department',
  region: 'region',
  population: 'population',
  mayorName: 'mayorName',
  mayorEmail: 'mayorEmail',
  mayorPhone: 'mayorPhone',
  address: 'address',
  website: 'website',
  isActive: 'isActive',
  username: 'username',
  password: 'password',
  email: 'email',
  phone: 'phone',
  institutionType: 'institutionType',
  customType: 'customType',
  primaryColor: 'primaryColor',
  secondaryColor: 'secondaryColor',
  createdBy: 'createdBy',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.CompanyScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  taxId: 'taxId',
  legalRepresentative: 'legalRepresentative',
  businessSector: 'businessSector',
  companySize: 'companySize',
  website: 'website',
  email: 'email',
  phone: 'phone',
  address: 'address',
  foundedYear: 'foundedYear',
  isActive: 'isActive',
  username: 'username',
  password: 'password',
  loginEmail: 'loginEmail',
  municipalityId: 'municipalityId',
  createdBy: 'createdBy',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ContactScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  contactId: 'contactId',
  status: 'status',
  requestMessage: 'requestMessage',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ConversationScalarFieldEnum = {
  id: 'id',
  participants: 'participants',
  lastMessageContent: 'lastMessageContent',
  lastMessageTime: 'lastMessageTime',
  unreadCount: 'unreadCount',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.MessageScalarFieldEnum = {
  id: 'id',
  conversationId: 'conversationId',
  senderId: 'senderId',
  receiverId: 'receiverId',
  content: 'content',
  messageType: 'messageType',
  status: 'status',
  createdAt: 'createdAt',
  readAt: 'readAt'
};

exports.Prisma.LessonResourceScalarFieldEnum = {
  id: 'id',
  lessonId: 'lessonId',
  title: 'title',
  description: 'description',
  type: 'type',
  url: 'url',
  filePath: 'filePath',
  fileSize: 'fileSize',
  orderIndex: 'orderIndex',
  isDownloadable: 'isDownloadable',
  createdAt: 'createdAt'
};

exports.Prisma.ModuleCertificateScalarFieldEnum = {
  id: 'id',
  moduleId: 'moduleId',
  studentId: 'studentId',
  certificateUrl: 'certificateUrl',
  issuedAt: 'issuedAt',
  grade: 'grade',
  completedAt: 'completedAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.NullableJsonNullValueInput = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};
exports.UserStatus = exports.$Enums.UserStatus = {
  ACTIVE: 'ACTIVE',
  INACTIVE: 'INACTIVE',
  PENDING_VERIFICATION: 'PENDING_VERIFICATION',
  SUSPENDED: 'SUSPENDED'
};

exports.UserRole = exports.$Enums.UserRole = {
  YOUTH: 'YOUTH',
  ADOLESCENTS: 'ADOLESCENTS',
  COMPANIES: 'COMPANIES',
  MUNICIPAL_GOVERNMENTS: 'MUNICIPAL_GOVERNMENTS',
  TRAINING_CENTERS: 'TRAINING_CENTERS',
  NGOS_AND_FOUNDATIONS: 'NGOS_AND_FOUNDATIONS',
  SUPERADMIN: 'SUPERADMIN',
  INSTRUCTOR: 'INSTRUCTOR'
};

exports.EducationLevel = exports.$Enums.EducationLevel = {
  PRIMARY: 'PRIMARY',
  SECONDARY: 'SECONDARY',
  TECHNICAL: 'TECHNICAL',
  UNIVERSITY: 'UNIVERSITY',
  POSTGRADUATE: 'POSTGRADUATE',
  OTHER: 'OTHER'
};

exports.CompanySize = exports.$Enums.CompanySize = {
  MICRO: 'MICRO',
  SMALL: 'SMALL',
  MEDIUM: 'MEDIUM',
  LARGE: 'LARGE'
};

exports.ContractType = exports.$Enums.ContractType = {
  FULL_TIME: 'FULL_TIME',
  PART_TIME: 'PART_TIME',
  INTERNSHIP: 'INTERNSHIP',
  VOLUNTEER: 'VOLUNTEER',
  FREELANCE: 'FREELANCE'
};

exports.WorkModality = exports.$Enums.WorkModality = {
  ON_SITE: 'ON_SITE',
  REMOTE: 'REMOTE',
  HYBRID: 'HYBRID'
};

exports.ExperienceLevel = exports.$Enums.ExperienceLevel = {
  NO_EXPERIENCE: 'NO_EXPERIENCE',
  ENTRY_LEVEL: 'ENTRY_LEVEL',
  MID_LEVEL: 'MID_LEVEL',
  SENIOR_LEVEL: 'SENIOR_LEVEL'
};

exports.JobStatus = exports.$Enums.JobStatus = {
  ACTIVE: 'ACTIVE',
  PAUSED: 'PAUSED',
  CLOSED: 'CLOSED',
  DRAFT: 'DRAFT'
};

exports.ApplicationStatus = exports.$Enums.ApplicationStatus = {
  SENT: 'SENT',
  UNDER_REVIEW: 'UNDER_REVIEW',
  PRE_SELECTED: 'PRE_SELECTED',
  REJECTED: 'REJECTED',
  HIRED: 'HIRED'
};

exports.SenderType = exports.$Enums.SenderType = {
  COMPANY: 'COMPANY',
  APPLICANT: 'APPLICANT'
};

exports.MessageType = exports.$Enums.MessageType = {
  TEXT: 'TEXT',
  IMAGE: 'IMAGE',
  FILE: 'FILE'
};

exports.MessageStatus = exports.$Enums.MessageStatus = {
  SENT: 'SENT',
  DELIVERED: 'DELIVERED',
  READ: 'READ'
};

exports.CourseLevel = exports.$Enums.CourseLevel = {
  BEGINNER: 'BEGINNER',
  INTERMEDIATE: 'INTERMEDIATE',
  ADVANCED: 'ADVANCED'
};

exports.CourseCategory = exports.$Enums.CourseCategory = {
  SOFT_SKILLS: 'SOFT_SKILLS',
  BASIC_COMPETENCIES: 'BASIC_COMPETENCIES',
  JOB_PLACEMENT: 'JOB_PLACEMENT',
  ENTREPRENEURSHIP: 'ENTREPRENEURSHIP',
  TECHNICAL_SKILLS: 'TECHNICAL_SKILLS',
  DIGITAL_LITERACY: 'DIGITAL_LITERACY',
  COMMUNICATION: 'COMMUNICATION',
  LEADERSHIP: 'LEADERSHIP'
};

exports.LessonType = exports.$Enums.LessonType = {
  VIDEO: 'VIDEO',
  TEXT: 'TEXT',
  QUIZ: 'QUIZ',
  EXERCISE: 'EXERCISE',
  DOCUMENT: 'DOCUMENT',
  INTERACTIVE: 'INTERACTIVE'
};

exports.EnrollmentStatus = exports.$Enums.EnrollmentStatus = {
  ENROLLED: 'ENROLLED',
  IN_PROGRESS: 'IN_PROGRESS',
  COMPLETED: 'COMPLETED',
  DROPPED: 'DROPPED',
  SUSPENDED: 'SUSPENDED'
};

exports.QuestionType = exports.$Enums.QuestionType = {
  MULTIPLE_CHOICE: 'MULTIPLE_CHOICE',
  TRUE_FALSE: 'TRUE_FALSE',
  FILL_BLANK: 'FILL_BLANK',
  SORT_ELEMENTS: 'SORT_ELEMENTS',
  MULTIPLE_SELECT: 'MULTIPLE_SELECT',
  SHORT_ANSWER: 'SHORT_ANSWER'
};

exports.BusinessStage = exports.$Enums.BusinessStage = {
  IDEA: 'IDEA',
  STARTUP: 'STARTUP',
  GROWING: 'GROWING',
  ESTABLISHED: 'ESTABLISHED'
};

exports.NewsType = exports.$Enums.NewsType = {
  COMPANY: 'COMPANY',
  GOVERNMENT: 'GOVERNMENT',
  NGO: 'NGO'
};

exports.NewsStatus = exports.$Enums.NewsStatus = {
  PUBLISHED: 'PUBLISHED',
  DRAFT: 'DRAFT',
  ARCHIVED: 'ARCHIVED'
};

exports.NewsPriority = exports.$Enums.NewsPriority = {
  LOW: 'LOW',
  MEDIUM: 'MEDIUM',
  HIGH: 'HIGH',
  URGENT: 'URGENT'
};

exports.InstitutionType = exports.$Enums.InstitutionType = {
  MUNICIPALITY: 'MUNICIPALITY',
  NGO: 'NGO',
  FOUNDATION: 'FOUNDATION',
  OTHER: 'OTHER'
};

exports.ContactStatus = exports.$Enums.ContactStatus = {
  PENDING: 'PENDING',
  ACCEPTED: 'ACCEPTED',
  REJECTED: 'REJECTED',
  BLOCKED: 'BLOCKED'
};

exports.ResourceType = exports.$Enums.ResourceType = {
  PDF: 'PDF',
  DOCUMENT: 'DOCUMENT',
  VIDEO: 'VIDEO',
  AUDIO: 'AUDIO',
  IMAGE: 'IMAGE',
  LINK: 'LINK',
  ZIP: 'ZIP',
  OTHER: 'OTHER'
};

exports.Prisma.ModelName = {
  Profile: 'Profile',
  JobOffer: 'JobOffer',
  JobQuestion: 'JobQuestion',
  JobApplication: 'JobApplication',
  JobQuestionAnswer: 'JobQuestionAnswer',
  JobApplicationMessage: 'JobApplicationMessage',
  Course: 'Course',
  CourseModule: 'CourseModule',
  Lesson: 'Lesson',
  CourseEnrollment: 'CourseEnrollment',
  LessonProgress: 'LessonProgress',
  Quiz: 'Quiz',
  QuizQuestion: 'QuizQuestion',
  QuizAttempt: 'QuizAttempt',
  QuizAnswer: 'QuizAnswer',
  Certificate: 'Certificate',
  StudentNote: 'StudentNote',
  Discussion: 'Discussion',
  Entrepreneurship: 'Entrepreneurship',
  BusinessPlan: 'BusinessPlan',
  NewsArticle: 'NewsArticle',
  NewsComment: 'NewsComment',
  Resource: 'Resource',
  User: 'User',
  RefreshToken: 'RefreshToken',
  ExternalApiKey: 'ExternalApiKey',
  Institution: 'Institution',
  Municipality: 'Municipality',
  Company: 'Company',
  Contact: 'Contact',
  Conversation: 'Conversation',
  Message: 'Message',
  LessonResource: 'LessonResource',
  ModuleCertificate: 'ModuleCertificate'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }
        
        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
