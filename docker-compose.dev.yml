version: '3.8'

services:
  # PostgreSQL Database (Development)
  db:
    image: postgres:15-alpine
    restart: always
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: full_express_api_dev
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8"
    ports:
      - "5432:5432"
    volumes:
      - db_dev_data:/var/lib/postgresql/data
      - ./init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d full_express_api_dev"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    networks:
      - api-dev-network

  # Redis for caching (Development)
  redis:
    image: redis:7-alpine
    restart: always
    ports:
      - "6379:6379"
    volumes:
      - redis_dev_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - api-dev-network

  # MinIO Object Storage
  minio:
    image: minio/minio:latest
    restart: always
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin
    command: server /data --console-address ":9001"
    volumes:
      - minio_data:/data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3
    networks:
      - api-dev-network

  # API Application (Development)
  api:
    build:
      context: .
      dockerfile: Dockerfile.dev
    restart: always
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
      minio:
        condition: service_healthy
    environment:
      # Database
      DATABASE_URL: postgresql://postgres:postgres@db:5432/full_express_api_dev
      
      # Application
      NODE_ENV: development
      PORT: 3001
      JWT_SECRET: dev-jwt-secret-key
      
      # Redis
      REDIS_URL: redis://redis:6379
      
      # MinIO Configuration
      MINIO_ENDPOINT: minio
      MINIO_PORT: 9000
      MINIO_ACCESS_KEY: minioadmin
      MINIO_SECRET_KEY: minioadmin
      MINIO_USE_SSL: false
      MINIO_BASE_URL: http://localhost:9000
      
      # Logging
      LOG_LEVEL: debug
      
      # Rate limiting (more lenient in dev)
      RATE_LIMIT_WINDOW_MS: 900000
      RATE_LIMIT_MAX_REQUESTS: 1000
    ports:
      - "3001:3001"
    volumes:
      - .:/app
      - /app/node_modules
      - ./logs:/app/logs
      - ./uploads:/app/uploads
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - api-dev-network
    command: >
      sh -c "
        echo 'ðŸ”„ Waiting for database to be ready...' &&
        npx prisma migrate dev --name init &&
        echo 'ðŸŒ± Seeding database...' &&
        npm run prisma:seed &&
        echo 'ðŸš€ Starting development server...' &&
        npm run dev
      "

  # Prisma Studio (Development)
  prisma-studio:
    build:
      context: .
      dockerfile: Dockerfile.dev
    environment:
      DATABASE_URL: postgresql://postgres:postgres@db:5432/full_express_api_dev
    ports:
      - "5555:5555"
    volumes:
      - .:/app
      - /app/node_modules
    command: npx prisma studio --hostname 0.0.0.0 --port 5555
    networks:
      - api-dev-network
    depends_on:
      - db

  # MailHog for email testing (Development)
  mailhog:
    image: mailhog/mailhog:latest
    restart: always
    ports:
      - "1025:1025"  # SMTP
      - "8025:8025"  # Web UI
    networks:
      - api-dev-network

  # Adminer for database management (Development)
  adminer:
    image: adminer:latest
    restart: always
    ports:
      - "8080:8080"
    environment:
      ADMINER_DEFAULT_SERVER: db
    networks:
      - api-dev-network
    depends_on:
      - db

volumes:
  db_dev_data:
    driver: local
  redis_dev_data:
    driver: local
  minio_data:
    driver: local

networks:
  api-dev-network:
    driver: bridge 